// here is series of questions and answers 

Q1/
What is JSX ?
JSX is syntex extension for javascript used in react. it lets you to write HTML-like code inside 
javascript. react official documentation refers to JSX as a "syntex extension for javascript language"

Q2/
Transpilation v/s Compilation
Transpilation: converting code from one version of a language to another 
(like JSX to JS, or ES6 to ES5)
Compilation: converting human-readable code into optimized, often lower-level code
(eg., bundling, minifying).

Q3/
What is Babel?
A javascript transpiler that transforms JS/JSX into a form that browsers can understand
(usually older javascript)

Q4/
What happens with JSX behind the scene?
Babel Transpiles JSX -> React.createElement:
Babel plugin (@babel/preset-react) converts JSX into pure JS, this is transpilation because 
JSX is just syntactic sugar for function calls not a newlanguage.

for example of babel transpilation

<h1 style={{color:"red"}}>hello this is the example<h1/>       // written by you
React.createElement("h1",{style:{color:"red"}},hello this is the example)  // transpilation by babel

Babel Transpiles ES6 -> ES5
if you used modern JS fetures, Babel also converts that into older JavaScript
for compatibility.

Bundler Compilation (webpack,Vite,etc)
The transpiled files are bundled into a single/minified JS file. this step is
closer to Compilation since your project is being turned into something executable 
by the browser.

Browser Execution
React.createElement creates virtual DOM objects. React reconciler diffs the.
React DOM undates the real DOM.

Q5/
why we use double curly braces in style attribute?
since JSX is inline style is an object and not a string.
the first pair indicates you are embedding a javascript
expression inside JSX. the second pair is the object itself 
style={{color:"blue"}}

Q6/
why we need to use classname, htmlFor instead of class and for in JSX?
Since JSX is ultimately compiled into javascript and we all know that
"class" and "for" are reseved keywords in javascript. so it would create naming conflicts
and leads to errors when the JSX  compiled into javascript. that is why classname & htmlFor
is used as sn alternative to avoid conflicts.

Q7/ 
classname is attribute or props in JSX
classname looks like an html attribute because we write it inside a tag.
but under the hood, JSX is just javascript. when babel Transpiles this it becomes:

React.createElement("h1",{classname:"title"},"hello");

so, classname in jsx is a prop not a raw attribute. but react uses it to set the actual HTML
attribute class on the DOM element.

Q8/
JSX doesn't support loop like "for", but we can use "map". why?
"for" is a statement, produces no value => JSX can't directly use it.
"map" is an expression, produces an array of element => JSX can render it.

09/
css in react
// 1. regular css
// if you import css file in react those styles are global by default

// 2. css module
// lets you scope css to a component

// 3. inline css
// you use style prop, which takes a javascript object (not a string)
